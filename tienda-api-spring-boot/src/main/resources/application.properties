## PORT
# Cambiamos el puerto de escucha, por defecto es 8080
# e indicamos que lea la variable de entorno PORT si no existe que use 3000
server.port=${PORT:3000}
## COMPRIMIR RESPUESTAS
server.compression.enabled=${COMPRESS_ENABLED:true}
# server.compression.mime-types=text/html,text/xml,text/plain,text/css,application/json,application/javascript
server.compression.min-response-size=1024
##  LOCALE
# Configuramos el locale en España, si no fechas, numeros y monedas puede que no salgan bien.
spring.web.locale=es_ES
spring.web.locale-resolver=fixed
## API VERSION Y DESCRIPCION
# Versionamos la API
api.version=${API_VERSION:v1}
project.name=Tenistas API REST Spring Boot
## MENSAJE DE ERROR EN LAS EXCEPCIONES DE LA API
# Para los mensajes en las excepciones
server.error.include-message=always
## BASE DE DATOS
## Base de datos de desarrollo puede ser H2
# En fichero embebida o en memoria, tú eliges
# spring.datasource.url=jdbc:h2:./productosapirest
spring.datasource.url=jdbc:h2:mem:productosapirest
# Usuario y contraseña de la base de datos
spring.datasource.username=sa
#spring.datasource.password=password
# Habilitamos la consola de H2, quitamos en producción
http=//localhost:{server.port}/h2-console
# En nuestro caso http://localhost:3000/h2-console
spring.h2.console.enabled=true
# Habilitamos los mensajes sql en el log para ver las consultas, quitar en producción
spring.jpa.show-sql=true
spring.jpa.open-in-view=true
# Habilitamos que cargue los datos de prueba en la base de datos
# estos datos los carga del fichero data.sql del directorio resources, quitar en producción
spring.jpa.defer-datasource-initialization=true
# Habilitamos la creación de la base de datos en cada arranque, quitar en producción
spring.jpa.hibernate.ddl-auto=create-drop
# Habilitamos la carga de datos de prueba en cada arranque, quitar en producción
spring.sql.init.mode=always
# Habilitamos el dialecto de H2, quitar en producción
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
## MONGO DB
# Configuración de la base de datos MongoDB en base a variables de entorno
spring.data.mongodb.host=${MONGO_HOST:localhost}
spring.data.mongodb.port=${MONGO_PORT:27017}
spring.data.mongodb.database=${MONGO_DB:tienda}
spring.data.mongodb.username=${MONGO_USER:admin}
spring.data.mongodb.password=${MONGO_PASS:adminPassword123}
## ALMACENAMIENTO DE FICHEROS
## directorio de almacenamiento
upload.root-location=storage-dir
upload.delete=true
## LOGGING
# Log minimo, si no se especifica, por defecto es INFO cambiar en producción
# logging.level.root=DEBUG
## JACKSON
# Habilitamos la inclusión de las propiedades por defecto en los JSON
spring.jackson.mapper.default-view-inclusion=true
## NEGOCIACION DE CONTENIDOS
spring.mvc.contentnegotiation.favor-parameter=true
spring.mvc.contentnegotiation.parameter-name=format
## THYMELEAF
spring.thymeleaf.enabled=true
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
# Habilitamos el cache de Thymeleaf, quitar en producción
spring.thymeleaf.cache=false
## LOCALIZACION
spring.messages.basename=messages
spring.messages.cache-duration=-1
spring.messages.encoding=UTF-8
## FICHEROS
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
